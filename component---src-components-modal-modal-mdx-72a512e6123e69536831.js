(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{cGUx:function(e,n,o){"use strict";o.r(n),o.d(n,"_frontmatter",(function(){return u})),o.d(n,"default",(function(){return b}));o("5hJT"),o("W1QL"),o("K/PF"),o("t91x"),o("75LO"),o("PJhk");var t=o("mXGw"),a=o("/FXl"),l=o("TjRS"),s=o("ZFoC"),r=o("xVux"),c=o("GUIc");o("aD51");function d(){return(d=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}var u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/modal/modal.mdx"}});var m=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",n)}},i=(m("DefaultModal"),m("ScreenModal"),{_frontmatter:u}),p=l.a;function b(e){var n,o=e.components,m=function(e,n){if(null==e)return{};var o,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,["components"]);return Object(a.b)(p,d({},i,m,{components:o,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"modal"},"Modal"),Object(a.b)("h2",{id:"react-snippet"},"React snippet"),Object(a.b)("pre",null,Object(a.b)("code",d({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport ReactModal from 'react-modal';\nimport { useColorMode } from 'theme-ui';\n\nconst getModalClassNames = (colorMode) => ({\n  default: {\n    className: {\n      base: `modal modal-default ${colorMode}:modal-default`,\n      beforeClose: 'modal-closed',\n      afterOpen: 'modal-opened',\n    },\n    overlayClassName: {\n      base: `overlay overlay-default ${colorMode}:overlay-default`,\n      beforeClose: 'overlay-closed',\n      afterOpen: 'overlay-opened',\n    },\n  },\n  screen: {\n    className: {\n      base: `modal modal-screen ${colorMode}:modal-screen`,\n      beforeClose: 'modal-closed',\n      afterOpen: 'modal-opened',\n    },\n    overlayClassName: {\n      base: `overlay overlay-screen ${colorMode}:overlay-screen`,\n      beforeClose: 'overlay-closed',\n      afterOpen: 'overlay-opened',\n    },\n  },\n});\n\nconst Modal = ({ type, isOpen, onRequestClose, children }) => {\n  const [colorMode] = useColorMode();\n  const modalClassNames = getModalClassNames(colorMode);\n  return (\n    <ReactModal\n      closeTimeoutMS={300}\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      className={modalClassNames[type].className}\n      overlayClassName={modalClassNames[type].overlayClassName}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n")),Object(a.b)("h2",{id:"variants"},"Variants"),Object(a.b)(s.c,{__position:0,__code:'() => {\n  const DefaultModal = () => {\n    const [isOpen, toggleModal] = useState(false)\n    const openModal = () => toggleModal(true)\n    const closeModal = () => toggleModal(false)\n    return (\n      <div className="mb-4">\n        <Button onClick={openModal}>open default modal</Button>\n        <Modal type="default" isOpen={isOpen} onRequestClose={closeModal}>\n          <div className="p-8">\n            <Button onClick={closeModal}>Close modal</Button>\n          </div>\n        </Modal>\n      </div>\n    )\n  }\n  const ScreenModal = () => {\n    const [isOpen, toggleModal] = useState(false)\n    const openModal = () => toggleModal(true)\n    const closeModal = () => toggleModal(false)\n    return (\n      <>\n        <Button onClick={openModal}>open full screen modal</Button>\n        <Modal type="screen" isOpen={isOpen} onRequestClose={closeModal}>\n          <div className="p-8">\n            <Button onClick={closeModal}>Close modal</Button>\n          </div>\n        </Modal>\n      </>\n    )\n  }\n  return (\n    <>\n      <DefaultModal />\n      <ScreenModal />\n    </>\n  )\n}',__scope:(n={props:m,DefaultLayout:l.a,useState:t.useState,Playground:s.c,Button:r.a,Modal:c.a},n.DefaultLayout=l.a,n._frontmatter=u,n),mdxType:"Playground"},(function(){return Object(a.b)(t.Fragment,null,Object(a.b)((function(){var e=Object(t.useState)(!1),n=e[0],o=e[1],l=function(){return o(!1)};return Object(a.b)("div",{className:"mb-4"},Object(a.b)(r.a,{onClick:function(){return o(!0)},mdxType:"Button"},"open default modal"),Object(a.b)(c.a,{type:"default",isOpen:n,onRequestClose:l,mdxType:"Modal"},Object(a.b)("div",{className:"p-8"},Object(a.b)(r.a,{onClick:l,mdxType:"Button"},"Close modal"))))}),{mdxType:"DefaultModal"}),Object(a.b)((function(){var e=Object(t.useState)(!1),n=e[0],o=e[1],l=function(){return o(!1)};return Object(a.b)(t.Fragment,null,Object(a.b)(r.a,{onClick:function(){return o(!0)},mdxType:"Button"},"open full screen modal"),Object(a.b)(c.a,{type:"screen",isOpen:n,onRequestClose:l,mdxType:"Modal"},Object(a.b)("div",{className:"p-8"},Object(a.b)(r.a,{onClick:l,mdxType:"Button"},"Close modal"))))}),{mdxType:"ScreenModal"}))})))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/modal/modal.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-modal-modal-mdx-72a512e6123e69536831.js.map