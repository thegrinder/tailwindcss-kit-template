{"version":3,"sources":["webpack:///../src/components/modal/modal.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","useState","Playground","Button","Modal","isOpen","toggleModal","closeModal","className","onClick","type","onRequestClose","isMDXComponent"],"mappings":"yhBAUO,IAAMA,EAAe,Q,gNAE5B,IAAMC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAKZG,GAFeL,EAAc,gBACfA,EAAc,eACd,CAClBD,iBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAIA,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,6yCAiDL,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,6lCAAwmCC,SAAO,GAChpCZ,QACAK,kBACAQ,oBACAC,eACAC,WACAC,WANgpC,gBAOhpCX,IAPgpC,EAQhpCR,eARgpC,GAS/oCW,QAAQ,eACZ,WAmCK,OAAO,4BACP,aAnCqB,WAAM,MACKK,oBAAS,GAAhCI,EADkB,KACVC,EADU,KAKnBC,EAAa,kBAAMD,GAAY,IAErC,OAAO,mBAAKE,UAAU,QACtB,YAAC,IAAD,CAAQC,QALU,kBAAMH,GAAY,IAKRV,QAAQ,UAApC,sBACA,YAAC,IAAD,CAAOc,KAAK,UAAUL,OAAQA,EAAQM,eAAgBJ,EAAYX,QAAQ,SACxE,mBAAKY,UAAU,OACb,YAAC,IAAD,CAAQC,QAASF,EAAYX,QAAQ,UAArC,oBAwBN,CAAcA,QAAQ,iBACtB,aAnBoB,WAAM,MACMK,oBAAS,GAAhCI,EADiB,KACTC,EADS,KAKlBC,EAAa,kBAAMD,GAAY,IAErC,OAAO,4BACP,YAAC,IAAD,CAAQG,QALU,kBAAMH,GAAY,IAKRV,QAAQ,UAApC,0BACA,YAAC,IAAD,CAAOc,KAAK,SAASL,OAAQA,EAAQM,eAAgBJ,EAAYX,QAAQ,SACvE,mBAAKY,UAAU,OACb,YAAC,IAAD,CAAQC,QAASF,EAAYX,QAAQ,UAArC,oBAQN,CAAaA,QAAQ,0B,8MAQ7BF,EAAWkB,gBAAiB","file":"component---src-components-modal-modal-mdx-72a512e6123e69536831.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/thegrinder/tailwindcss-kit-template/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Playground } from 'docz';\nimport Button from '../button/ReactButton';\nimport Modal from './ReactModal';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst DefaultModal = makeShortcode(\"DefaultModal\");\nconst ScreenModal = makeShortcode(\"ScreenModal\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n\n    <h2 {...{\n      \"id\": \"react-snippet\"\n    }}>{`React snippet`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport ReactModal from 'react-modal';\nimport { useColorMode } from 'theme-ui';\n\nconst getModalClassNames = (colorMode) => ({\n  default: {\n    className: {\n      base: \\`modal modal-default \\${colorMode}:modal-default\\`,\n      beforeClose: 'modal-closed',\n      afterOpen: 'modal-opened',\n    },\n    overlayClassName: {\n      base: \\`overlay overlay-default \\${colorMode}:overlay-default\\`,\n      beforeClose: 'overlay-closed',\n      afterOpen: 'overlay-opened',\n    },\n  },\n  screen: {\n    className: {\n      base: \\`modal modal-screen \\${colorMode}:modal-screen\\`,\n      beforeClose: 'modal-closed',\n      afterOpen: 'modal-opened',\n    },\n    overlayClassName: {\n      base: \\`overlay overlay-screen \\${colorMode}:overlay-screen\\`,\n      beforeClose: 'overlay-closed',\n      afterOpen: 'overlay-opened',\n    },\n  },\n});\n\nconst Modal = ({ type, isOpen, onRequestClose, children }) => {\n  const [colorMode] = useColorMode();\n  const modalClassNames = getModalClassNames(colorMode);\n  return (\n    <ReactModal\n      closeTimeoutMS={300}\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      className={modalClassNames[type].className}\n      overlayClassName={modalClassNames[type].overlayClassName}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const DefaultModal = () => {\\n    const [isOpen, toggleModal] = useState(false)\\n    const openModal = () => toggleModal(true)\\n    const closeModal = () => toggleModal(false)\\n    return (\\n      <div className=\\\"mb-4\\\">\\n        <Button onClick={openModal}>open default modal</Button>\\n        <Modal type=\\\"default\\\" isOpen={isOpen} onRequestClose={closeModal}>\\n          <div className=\\\"p-8\\\">\\n            <Button onClick={closeModal}>Close modal</Button>\\n          </div>\\n        </Modal>\\n      </div>\\n    )\\n  }\\n  const ScreenModal = () => {\\n    const [isOpen, toggleModal] = useState(false)\\n    const openModal = () => toggleModal(true)\\n    const closeModal = () => toggleModal(false)\\n    return (\\n      <>\\n        <Button onClick={openModal}>open full screen modal</Button>\\n        <Modal type=\\\"screen\\\" isOpen={isOpen} onRequestClose={closeModal}>\\n          <div className=\\\"p-8\\\">\\n            <Button onClick={closeModal}>Close modal</Button>\\n          </div>\\n        </Modal>\\n      </>\\n    )\\n  }\\n  return (\\n    <>\\n      <DefaultModal />\\n      <ScreenModal />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Button,\n      Modal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const DefaultModal = () => {\n          const [isOpen, toggleModal] = useState(false);\n\n          const openModal = () => toggleModal(true);\n\n          const closeModal = () => toggleModal(false);\n\n          return <div className=\"mb-4\">\n          <Button onClick={openModal} mdxType=\"Button\">open default modal</Button>\n          <Modal type=\"default\" isOpen={isOpen} onRequestClose={closeModal} mdxType=\"Modal\">\n            <div className=\"p-8\">\n              <Button onClick={closeModal} mdxType=\"Button\">Close modal</Button>\n            </div>\n          </Modal>\n        </div>;\n        };\n\n        const ScreenModal = () => {\n          const [isOpen, toggleModal] = useState(false);\n\n          const openModal = () => toggleModal(true);\n\n          const closeModal = () => toggleModal(false);\n\n          return <>\n          <Button onClick={openModal} mdxType=\"Button\">open full screen modal</Button>\n          <Modal type=\"screen\" isOpen={isOpen} onRequestClose={closeModal} mdxType=\"Modal\">\n            <div className=\"p-8\">\n              <Button onClick={closeModal} mdxType=\"Button\">Close modal</Button>\n            </div>\n          </Modal>\n        </>;\n        };\n\n        return <>\n        <DefaultModal mdxType=\"DefaultModal\" />\n        <ScreenModal mdxType=\"ScreenModal\" />\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}